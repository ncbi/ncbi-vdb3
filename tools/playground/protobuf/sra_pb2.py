# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sra.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='sra.proto',
  package='sra',
  syntax='proto3',
  serialized_pb=_b('\n\tsra.proto\x12\x03sra\"\x15\n\x08IntArray\x12\t\n\x01i\x18\x01 \x03(\x05\"H\n\x04\x43\x65ll\x12\x13\n\tstr_value\x18\x01 \x01(\tH\x00\x12#\n\nint_values\x18\x02 \x01(\x0b\x32\r.sra.IntArrayH\x00\x42\x06\n\x04\x44\x61ta\"\"\n\x06\x43olumn\x12\x18\n\x05\x63\x65lls\x18\x01 \x03(\x0b\x32\t.sra.Cell\"/\n\x05Group\x12\r\n\x05names\x18\x01 \x03(\t\x12\x17\n\x0f\x65ncoded_columns\x18\x02 \x03(\x0c\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_INTARRAY = _descriptor.Descriptor(
  name='IntArray',
  full_name='sra.IntArray',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='i', full_name='sra.IntArray.i', index=0,
      number=1, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=18,
  serialized_end=39,
)


_CELL = _descriptor.Descriptor(
  name='Cell',
  full_name='sra.Cell',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='str_value', full_name='sra.Cell.str_value', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='int_values', full_name='sra.Cell.int_values', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='Data', full_name='sra.Cell.Data',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=41,
  serialized_end=113,
)


_COLUMN = _descriptor.Descriptor(
  name='Column',
  full_name='sra.Column',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cells', full_name='sra.Column.cells', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=115,
  serialized_end=149,
)


_GROUP = _descriptor.Descriptor(
  name='Group',
  full_name='sra.Group',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='names', full_name='sra.Group.names', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='encoded_columns', full_name='sra.Group.encoded_columns', index=1,
      number=2, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=151,
  serialized_end=198,
)

_CELL.fields_by_name['int_values'].message_type = _INTARRAY
_CELL.oneofs_by_name['Data'].fields.append(
  _CELL.fields_by_name['str_value'])
_CELL.fields_by_name['str_value'].containing_oneof = _CELL.oneofs_by_name['Data']
_CELL.oneofs_by_name['Data'].fields.append(
  _CELL.fields_by_name['int_values'])
_CELL.fields_by_name['int_values'].containing_oneof = _CELL.oneofs_by_name['Data']
_COLUMN.fields_by_name['cells'].message_type = _CELL
DESCRIPTOR.message_types_by_name['IntArray'] = _INTARRAY
DESCRIPTOR.message_types_by_name['Cell'] = _CELL
DESCRIPTOR.message_types_by_name['Column'] = _COLUMN
DESCRIPTOR.message_types_by_name['Group'] = _GROUP

IntArray = _reflection.GeneratedProtocolMessageType('IntArray', (_message.Message,), dict(
  DESCRIPTOR = _INTARRAY,
  __module__ = 'sra_pb2'
  # @@protoc_insertion_point(class_scope:sra.IntArray)
  ))
_sym_db.RegisterMessage(IntArray)

Cell = _reflection.GeneratedProtocolMessageType('Cell', (_message.Message,), dict(
  DESCRIPTOR = _CELL,
  __module__ = 'sra_pb2'
  # @@protoc_insertion_point(class_scope:sra.Cell)
  ))
_sym_db.RegisterMessage(Cell)

Column = _reflection.GeneratedProtocolMessageType('Column', (_message.Message,), dict(
  DESCRIPTOR = _COLUMN,
  __module__ = 'sra_pb2'
  # @@protoc_insertion_point(class_scope:sra.Column)
  ))
_sym_db.RegisterMessage(Column)

Group = _reflection.GeneratedProtocolMessageType('Group', (_message.Message,), dict(
  DESCRIPTOR = _GROUP,
  __module__ = 'sra_pb2'
  # @@protoc_insertion_point(class_scope:sra.Group)
  ))
_sym_db.RegisterMessage(Group)


# @@protoc_insertion_point(module_scope)
